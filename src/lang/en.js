export default {
  ffMgt: {
    //flowformManagement
    addTemplate: 'Add Template',
    seletedTemplate: 'Seleted Templates',
    wrongPage: 'Wrong Page',
    flowDesign: 'Flow Design',
    designPublish: 'Design And Publish',
    deleteTemplate: 'Delete Template',
    publishedTemplate: 'Published Template',
    editPublish: 'Edit Publish',
    deleteFlow: 'Delete Flow',
    deleteTemplateEnsureTitle: 'Confirm to delete this template?',
    deleteTemplateContent: 'Template deleting will not effect published flow, You can add newest template again!',
    deleteFlowEnsureTitle: 'Confirm to delete this flow?',
    deleteFlowContent: 'Flow deleting will not effect running flow, but this flow can not be initiated later!',
    modal: {
      selectTemplate: 'Select a template',
      filterByName: 'Filter by name',
    },
  },
  common: {
    emptyData: 'Empty Date',
    preview: 'Preview',
    okText: 'Ok',
    cancelText: 'Cancel',
    query: 'Query',
    reset: 'Reset',
    status: 'Status',
    check: 'Check',
    edit: 'Edit',
    submit: 'Submit',
    revoke: 'Revoke',
    ensureDelete: 'Ensure Delete',
    delete: 'Delete',
    deal: 'Deal With',
    back: 'Back',
    printPreview: 'Print Preview',
    wrongPage: 'Wrong Page',
    addonsUpload: 'Upload Attachments',
    plzInput: 'Please input content here',
    _status: {
      draft: 'Draft',
      todo: 'Todo',
      done: 'Completed',
      revoke: 'Revoke',
      auding: 'Auditing',
      reject: 'Reject',
      change: 'Change',
    },
    table: {
      title: 'Title',
      businessId: 'Workorder Number',
      orderType: 'Workorder Type',
      status: 'Status',
      updateBy: 'Update By',
      createTime: 'Create Time',
      updateTime: 'Update Time',
      delegator: 'Delegator',
      action: 'Action',
      applyUser: 'Apply User',
      nodeName: 'Task Name',
      copyNode: 'Copy Node',
      copyBy: 'Copy By',
      copyTime: 'Copy Time',
      taskStartTime: 'Start Time',
      taskEndTime: 'End Time',
      comment: 'Comment',
      taskDuration: 'Task Cost',
      timeRange: 'Time Range',

    },
  },
  formPreview: {
    apply: 'Initiate Application',
    pass: 'Approval Passed',
    delegate: 'Task Delegation',
    backTask: 'Reject',
    parseError: 'Form Parsing Error',
    submitAndInitiateApply: 'Submit and Initiate',
    saveAsDraft: 'Save as Draft',
    flowApprove: 'Flow Approval',
    getFormDataError: 'Failed to get form data. Please check if the form is filled out correctly!',
    checkFlowDiagram: 'View Flowchart',
    flowChart: 'Flowchart'


  },
  submitInfoModal: {
    comment: 'Comment or Remark',
    recommendations: 'Recommendations',
    enclosure: 'Attachments',
    delegator: 'Delegator',
    delegateTo: 'Delegate To Specific Node',
    selectDealPerson: 'Select Processor',
    words: {
      a: 'Read',
      b: 'Received',
      c: 'Verified',
      d: 'Qualified',
      e: 'True',
      f: 'Confirmed',
      g: 'Reviewed',
      h: 'Acknowledged  ',
      i: 'Well done',
    },
  },

  apply: {
    initiateApply: 'Initiate Application',
    drawBackApply: 'Revoke Application',
    urge: 'Urge Task',
    selectFlow: 'Select Flow',
  },
  todo: {
    approveFlow: 'Approve Flow',
  },
  ffDesigner: {
    formDesign: 'Form Design',
    flowDesign: 'Flow Design',
    ffPublish: 'Publish',
    submitSuccess: 'Submit Success!',
    continueDesign: 'Continue Designing',
  },
  ffPublish: {
    iconSetting: 'Icon Setting',
    icon: 'Icon',
    formName: 'Form Name',
    maxCharacters: 'Max Characters',
    plzInputFormName: 'Please Input Form Name Here',
    group: 'Group',
    assignAgroup: 'Please select a group for this flow',
    newGroup: 'New Group',
    newGroupName: 'New Group Name',
    formDes: 'Form Statement',
    plzInputDes: 'Please provide a brief description of the purpose and precautions of this process form here.',
    notificateType: 'Notification Push Type',
    howToNotice: 'Specify the method of notification',
    message: 'SMS Notification',
    email: 'Email Notification',
    whoCanInitiate: 'Initiators',
    whoCanInitiateDes: 'Configure personnel who can initiate the process here',
    whoCanCheck: 'Viewers',
    whoCanCheckDes: 'Configure personnel who can view the entire process here',
    publishFlowForm: 'Publish Workflow',
    publishTemplate: 'Publish Template',
    groupNameCanNotBeEmpty: 'Group name cannot be empty',
    plzDontAddDuplicate: 'Do not add duplicates',
    requiredFieldsLack: 'Required fields are empty, please check before submitting!',
    flowNodeCheckPassed: 'Process node configuration check passed',
    lackApproverConfig: 'Approval nodes without designated approvers were detected, please check the configuration',
  },
  flowDesigner: {
    proPanel: {
      approveConfig: 'Approval Configuration',
      autoApprove: 'Auto-Approval',
      approveType: 'Approval Type',
      fieldsControl: 'Field Control',
      copyConfig: 'Copy Configuration',
      copyType: 'Copy Type',
      nodeStart: 'Before Node Approval',
      nodeEnd: 'After Node Approval',
      checkConfig: 'View Configuration',
      showNewest: 'View Latest',
    },
  },
  orgSelectComp: {
    // 组织架构选择器组件
    approverDesignation: 'Specify Approvers',
    none: 'None',
    applicantSelf: 'Applicant Self',
    applicantLeader: 'Applicant Direct Supervisor',
    peopleAssignment: 'Specify Personnel',
    roleAssignment: 'Specify Roles',
    deptAssignment: 'Specify Departments',
    OrgStruct: 'Organizational Structure',
    dept: 'Department',
    role: 'Role',
    people: 'Personnel',
    allPeople: 'All Personnel',
    deptLeader: 'Department Leader',
  },
};
